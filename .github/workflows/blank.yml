#include<iostream>
using namespace std;
struct student
{
    char name[20];
    int age;
    float grade;
};
void func_name(struct &);
void main(void)
{
}
#include "myinclude.h"
void read(int A[], int n)
{
    int i;
    for (i=0; i<n; i++)
        scanf("%d", &A[i]);
}
void printf(int A[], int n)
{
    int i;
    for (i=0; i<n; i++)
        printf("%d", A[i]);
    printf("\n");
}
int max(int A[], int n)
{ 
    int maxr= A[0];
    int i;
    for (i=0; i<n; i++)
    {
        if(A[i]> max)
        maxr= A[i];
    }
    }
}
int min(int A[], int n)
{
    int minr= A[0];
    int i;
    for (i=0; i<n; i++)
    {
        if(A[i]< min)
        minr= A[i];
    }
}
void copy(int A[], int n)
{
    int i;
    for(i=0; i<n; i++)
    {
        B[i]=A[i];
    }
}
int find(int A[], int n, int x)
{
    int i;
    for (i=0; i<n; i+=)
    {
        if (A[i]==x)
        return i;
    }
    return -1;
}
int union_set(int A[], int n, int B[], int m)
{
    int i;
    for (i=0; i<n; i++)
    {
        if (find(A,n,B[i]==-1))
        {
            A[n++]=B[i];
        }
    }
    return n;

}
int intersection_set(int A[], int n, int B[], int m, int C[])
{
    int i, k=0;
    for(i=0; i<n;i++)
    {
        if (find(B,m,A[i]) !=-1)
        {
            C[k++] =A[i];
        }
    }
    return k;

}
